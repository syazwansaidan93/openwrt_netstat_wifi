<?php
/**
 * OpenWrt Traffic Data API
 *
 * This PHP script connects to the SQLite database generated by the Python logger
 * and serves the traffic data or DHCP lease data as a JSON API.
 */

// --- Configuration ---
// Path to the SQLite database file.
// IMPORTANT: This path must match the location where the Python script stores the DB.
$databaseFile = '/home/openwrt/logger/openwrt_traffic.db';

// Set the Content-Type header to application/json
header('Content-Type: application/json');

// --- Database Connection and Data Retrieval ---
$conn = null;
try {
    // Create a new PDO instance for SQLite
    $conn = new PDO("sqlite:" . $databaseFile);
    // Set error mode to exceptions for better error handling
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Determine which data type to fetch based on 'type' URL parameter
    $dataType = $_GET['type'] ?? 'dashboard'; // Default to 'dashboard'

    $processedResults = []; // Initialize processed results array
    $lastUpdated = null; // Initialize last updated timestamp

    // Fetch the last update timestamp from the traffic_data table, which is still a good indicator
    $stmtLastUpdate = $conn->prepare("SELECT MAX(timestamp) FROM traffic_data");
    $stmtLastUpdate->execute();
    $lastUpdated = $stmtLastUpdate->fetchColumn();

    if ($dataType === 'leases') {
        // Fetch all DHCP lease data
        $stmt = $conn->prepare("SELECT mac_address, ip_address, hostname FROM dhcp_leases ORDER BY mac_address ASC");
        $stmt->execute();
        $rawResults = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ($rawResults as $row) {
            $macAddress = $row['mac_address'];
            $ipAddress = $row['ip_address'];
            $hostname = $row['hostname'];

            $displayHostname = null;
            if (!empty($hostname)) {
                $displayHostname = $hostname;
            } elseif (!empty($ipAddress)) {
                $displayHostname = $ipAddress;
            }

            if (!empty($macAddress) && !empty($displayHostname)) {
                $processedResults[] = [
                    'mac_address' => $macAddress,
                    'hostname' => $displayHostname
                ];
            }
        }
    } elseif ($dataType === 'dashboard') {
        // This is the main endpoint. It directly queries the total_traffic table
        // and joins it with dhcp_leases for hostname resolution.
        $query = "SELECT
                      tt.device_mac,
                      tt.total_rx_bytes,
                      tt.total_tx_bytes,
                      CASE
                          WHEN tt.device_mac = 'wan:' THEN 'wan:'
                          WHEN dh.hostname IS NOT NULL AND dh.hostname != '' THEN dh.hostname
                          WHEN dh.ip_address IS NOT NULL AND dh.ip_address != '' THEN dh.ip_address
                          ELSE tt.device_mac
                      END as hostname
                  FROM total_traffic tt
                  LEFT JOIN dhcp_leases dh ON tt.device_mac = dh.mac_address
                  ORDER BY hostname ASC";
        
        $stmt = $conn->prepare($query);
        $stmt->execute();
        $processedResults = $stmt->fetchAll(PDO::FETCH_ASSOC);

    } else {
        // Handle unknown data types
        http_response_code(400); // Bad Request
        echo json_encode([
            "status" => "error",
            "message" => "Invalid data type specified. Valid types are: leases and dashboard."
        ], JSON_PRETTY_PRINT);
        exit;
    }

    // Prepare the response array
    $response = [
        "status" => "success",
        "data_type" => $dataType,
        "last_updated" => $lastUpdated,
        "data" => $processedResults
    ];

    // Output the results as JSON
    echo json_encode($response, JSON_PRETTY_PRINT);

} catch (PDOException $e) {
    // Handle database connection or query errors
    http_response_code(500); // Internal Server Error
    echo json_encode([
        "status" => "error",
        "message" => "Database error: " . $e->getMessage()
    ], JSON_PRETTY_PRINT);
} catch (Exception $e) {
    // Handle any other unexpected errors
    http_response_code(500); // Internal Server Error
    echo json_encode([
        "status" => "error",
        "message" => "An unexpected error occurred: " . $e->getMessage()
    ], JSON_PRETTY_PRINT);
} finally {
    // Close the database connection
    if ($conn) {
        $conn = null;
    }
}
?>
