<?php
/**
 * OpenWrt Traffic Data API
 *
 * This PHP script connects to the SQLite database generated by the Python logger
 * and serves the traffic data or DHCP lease data as a JSON API.
 */

// --- Configuration ---
// Path to the SQLite database file.
// This path now points to the database file in the Python collector directory.
$databaseFile = '/var/www/openwrt_collector/openwrt_traffic.db';

// Set the Content-Type header to application/json
header('Content-Type: application/json');

// --- Database Connection and Data Retrieval ---
$conn = null;
try {
    // Create a new PDO instance for SQLite
    $conn = new PDO("sqlite:" . $databaseFile);
    // Set error mode to exceptions for better error handling
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Determine which data type to fetch based on 'type' URL parameter
    $dataType = $_GET['type'] ?? 'traffic'; // Default to 'traffic'

    $tableName = '';
    $columns = '';
    $orderBy = '';
    $lastUpdated = null; // Initialize last updated timestamp
    $processedResults = []; // Initialize processed results array

    if ($dataType === 'leases') {
        $tableName = 'dhcp_leases';
        $columns = 'mac_address, ip_address, hostname';
        $orderBy = 'mac_address ASC';

        // Fetch all results as an associative array
        $stmt = $conn->prepare("SELECT " . $columns . " FROM " . $tableName . " ORDER BY " . $orderBy);
        $stmt->execute();
        $rawResults = $stmt->fetchAll(PDO::FETCH_ASSOC);

        foreach ($rawResults as $row) {
            $macAddress = $row['mac_address'];
            $ipAddress = $row['ip_address'];
            $hostname = $row['hostname'];

            $displayHostname = null;
            if (!empty($hostname)) {
                $displayHostname = $hostname;
            } elseif (!empty($ipAddress)) {
                $displayHostname = $ipAddress;
            }

            if (!empty($macAddress) && !empty($displayHostname)) {
                $processedResults[] = [
                    'mac_address' => $macAddress,
                    'hostname' => $displayHostname
                ];
            }
        }
    } elseif ($dataType === 'final') {
        // Fetch aggregated traffic data (sum over the entire period)
        // This query sums RX/TX bytes per device_mac across all stored timestamps
        $stmtTraffic = $conn->prepare("SELECT device_mac, SUM(rx_bytes) as total_rx_bytes, SUM(tx_bytes) as total_tx_bytes FROM traffic_data GROUP BY device_mac ORDER BY device_mac ASC");
        $stmtTraffic->execute();
        $trafficData = $stmtTraffic->fetchAll(PDO::FETCH_ASSOC);

        // Fetch all DHCP lease data to map MAC to hostname/IP
        $stmtLeases = $conn->prepare("SELECT mac_address, ip_address, hostname FROM dhcp_leases");
        $stmtLeases->execute();
        $leasesData = $stmtLeases->fetchAll(PDO::FETCH_ASSOC);

        $macToHostnameMap = [];
        foreach ($leasesData as $leaseRow) {
            $mac = $leaseRow['mac_address'];
            $ip = $leaseRow['ip_address'];
            $hostname = $leaseRow['hostname'];

            $resolvedHostname = null;
            if (!empty($hostname)) {
                $resolvedHostname = $hostname;
            } elseif (!empty($ip)) {
                $resolvedHostname = $ip;
            } else {
                $resolvedHostname = $mac; // Fallback to MAC if no hostname or IP
            }
            $macToHostnameMap[$mac] = $resolvedHostname;
        }

        // Process aggregated traffic data to replace MAC with hostname
        foreach ($trafficData as $trafficRow) {
            $deviceMac = $trafficRow['device_mac'];
            $resolvedName = $deviceMac; // Default to MAC

            if ($deviceMac === 'wan:') {
                $resolvedName = 'wan:'; // Keep 'wan:' as is
            } elseif (isset($macToHostnameMap[$deviceMac])) {
                $resolvedName = $macToHostnameMap[$deviceMac];
            }

            $processedResults[] = [
                'hostname' => $resolvedName,
                'rx_bytes' => (int)$trafficRow['total_rx_bytes'], // Cast to int as SUM can return string
                'tx_bytes' => (int)$trafficRow['total_tx_bytes']  // Cast to int as SUM can return string
            ];
        }

        // Fetch the last update timestamp for traffic data for the 'final' type as well
        $stmtLastUpdate = $conn->prepare("SELECT MAX(timestamp) FROM traffic_data");
        $stmtLastUpdate->execute();
        $lastUpdated = $stmtLastUpdate->fetchColumn();

    } else { // Default to 'traffic'
        $tableName = 'traffic_data';
        $columns = 'device_mac, rx_bytes, tx_bytes';
        $orderBy = 'device_mac ASC';

        // Fetch the last update timestamp for traffic data
        $stmtLastUpdate = $conn->prepare("SELECT MAX(timestamp) FROM traffic_data");
        $stmtLastUpdate->execute();
        $lastUpdated = $stmtLastUpdate->fetchColumn();

        // Fetch all results as an associative array
        $stmt = $conn->prepare("SELECT " . $columns . " FROM " . $tableName . " ORDER BY " . $orderBy);
        $stmt->execute();
        $processedResults = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // Prepare the response array
    $response = [
        "status" => "success",
        "data_type" => $dataType,
        "data" => $processedResults
    ];

    // Add last_updated for 'traffic' and 'final' data types
    if ($dataType === 'traffic' || $dataType === 'final') {
        $response['last_updated'] = $lastUpdated;
    }

    // Output the results as JSON
    echo json_encode($response, JSON_PRETTY_PRINT);

} catch (PDOException $e) {
    // Handle database connection or query errors
    http_response_code(500); // Internal Server Error
    echo json_encode([
        "status" => "error",
        "message" => "Database error: " . $e->getMessage()
    ], JSON_PRETTY_PRINT);
} catch (Exception $e) {
    // Handle any other unexpected errors
    http_response_code(500); // Internal Server Error
    echo json_encode([
        "status" => "error",
        "message" => "An unexpected error occurred: " . $e->getMessage()
    ], JSON_PRETTY_PRINT);
} finally {
    // Close the database connection
    if ($conn) {
        $conn = null;
    }
}

?>
